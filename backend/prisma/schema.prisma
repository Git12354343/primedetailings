generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Booking {
  id                  Int           @id @default(autoincrement())
  firstName           String        @db.VarChar(100)
  lastName            String        @db.VarChar(100)
  phoneNumber         String        @db.VarChar(20)
  vehicleType         String        @db.VarChar(50)
  make                String        @db.VarChar(50)
  model               String        @db.VarChar(50)
  year                Int
  services            String        @db.Text
  extras              String?       @db.Text
  date                DateTime      @db.Date
  time                String        @db.VarChar(20)
  status              BookingStatus @default(PENDING)
  confirmationCode    String        @unique @db.VarChar(10)
  detailerId          Int?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  address             String        @db.VarChar(255)
  city                String        @db.VarChar(100)
  email               String        @db.VarChar(255)
  emailSent           Boolean       @default(false)
  notes               String?       @db.Text
  postalCode          String        @db.VarChar(10)
  reminderSent        Boolean       @default(false)
  specialInstructions String?       @db.Text
  totalPrice          Decimal?      @db.Decimal(8, 2)
  detailer            Detailer?     @relation(fields: [detailerId], references: [id])

  @@index([detailerId], map: "bookings_detailerId_fkey")
  @@map("bookings")
}

model Detailer {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  phone     String    @unique @db.VarChar(20)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]

  @@map("detailers")
}

model Contact {
  id        Int           @id @default(autoincrement())
  name      String        @db.VarChar(100)
  email     String        @db.VarChar(255)
  phone     String?       @db.VarChar(20)
  subject   String        @db.VarChar(200)
  message   String        @db.Text
  status    ContactStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  emailSent Boolean       @default(false)

  @@map("contacts")
}

model Service {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(100)
  description String?          @db.Text
  category    ServiceCategory  @default(DETAILING)
  isActive    Boolean          @default(true)
  sortOrder   Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  pricing     ServicePricing[]

  @@map("services")
}

model ServicePricing {
  id          Int      @id @default(autoincrement())
  serviceId   Int
  vehicleType String   @db.VarChar(50)
  price       Decimal  @db.Decimal(8, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, vehicleType])
  @@map("service_pricing")
}

model AddOn {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  description String?       @db.Text
  category    AddOnCategory @default(ENHANCEMENT)
  price       Decimal       @db.Decimal(8, 2)
  isActive    Boolean       @default(true)
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("add_ons")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED
  NO_SHOW
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  ARCHIVED
}

enum ServiceCategory {
  DETAILING
  PROTECTION
  RESTORATION
  MAINTENANCE
  SPECIALTY
}

enum AddOnCategory {
  ENHANCEMENT
  PROTECTION
  CLEANING
  RESTORATION
}
