// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Booking {
  id                   Int           @id @default(autoincrement())
  firstName            String        @db.VarChar(100)
  lastName             String        @db.VarChar(100)
  email                String        @db.VarChar(255)
  phoneNumber          String        @db.VarChar(20)
  address              String        @db.VarChar(255)
  city                 String        @db.VarChar(100)
  postalCode           String        @db.VarChar(10)
  vehicleType          String        @db.VarChar(50)
  make                 String        @db.VarChar(50)
  model                String        @db.VarChar(50)
  year                 Int
  services             String        @db.Text // JSON string of selected services
  extras               String?       @db.Text // JSON string of selected add-ons
  date                 DateTime      @db.Date
  time                 String        @db.VarChar(20)
  specialInstructions  String?       @db.Text // Optional special instructions
  notes                String?       @db.Text // Private detailer notes - NEW
  status               BookingStatus @default(PENDING)
  confirmationCode     String        @unique @db.VarChar(10)
  detailer             Detailer?     @relation(fields: [detailerId], references: [id])
  detailerId           Int?
  totalPrice           Decimal?      @db.Decimal(8,2) // Store calculated total price
  emailSent            Boolean       @default(false) // Track if confirmation email was sent
  reminderSent         Boolean       @default(false) // Track if reminder email was sent
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  
  @@map("bookings")
}

model Detailer {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  phone     String    @unique @db.VarChar(20)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255) // Hashed password
  isActive  Boolean   @default(true)
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@map("detailers")
}

model Contact {
  id        Int           @id @default(autoincrement())
  name      String        @db.VarChar(100)
  email     String        @db.VarChar(255)
  phone     String?       @db.VarChar(20)
  subject   String        @db.VarChar(200)
  message   String        @db.Text
  status    ContactStatus @default(NEW)
  emailSent Boolean       @default(false) // Track if notification email was sent
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  @@map("contacts")
}

// NEW: Service Management Tables
model Service {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(100)
  description String?          @db.Text
  category    ServiceCategory  @default(DETAILING)
  isActive    Boolean          @default(true)
  sortOrder   Int              @default(0) // For ordering services in UI
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  pricing     ServicePricing[]
  
  @@map("services")
}

model ServicePricing {
  id          Int     @id @default(autoincrement())
  serviceId   Int
  vehicleType String  @db.VarChar(50) // Sedan, SUV, Truck, Coupe
  price       Decimal @db.Decimal(8,2)
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([serviceId, vehicleType])
  @@map("service_pricing")
}

// NEW: Add-on Management Table  
model AddOn {
  id          Int            @id @default(autoincrement())
  name        String         @db.VarChar(100)
  description String?        @db.Text
  category    AddOnCategory  @default(ENHANCEMENT)
  price       Decimal        @db.Decimal(8,2) // Fixed price for add-ons
  isActive    Boolean        @default(true)
  sortOrder   Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  @@map("add_ons")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED
  NO_SHOW
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  ARCHIVED
}

enum ServiceCategory {
  DETAILING
  PROTECTION
  RESTORATION
  MAINTENANCE
  SPECIALTY
}

enum AddOnCategory {
  ENHANCEMENT
  PROTECTION
  CLEANING
  RESTORATION
}